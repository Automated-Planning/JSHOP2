;;; This file contains a SHOP domain representation of the block-stacking
;;; algorithm from the following paper:
;;;    N. Gupta and D. Nau, On the complexity of blocks-world planning,
;;;    Artificial Intelligence 56(2-3):223-254, August 1992.


;;; ------------------------------------------------------------------------
;;; Declare all the data
;;; ------------------------------------------------------------------------

(defdomain colregs
    (

        ;; The method for sailling between two waypoints
        (:method (sail ?boat ?boat-head ?gc)

            sail1
            (   
                ;; Reached last waypoint
                (at             ?boat ?gc   )
                (waypoint-last  ?gc         )
            )                                     
            ()

            sail2
            (   
                ;; NOT reached last waypoint, way is free (no obstacle)
                (at                 ?boat       ?gc             )
                (NOT(waypoint-last  ?gc)                        )
                (way-free           ?boat                       )
                (adj                ?boat-head  ?adj-gc     ?gc )
            )                    
            (
                ;; Verify collision and go to next detected free position
                (!verify-collision  ?boat   ?boat-head          )
                (goto-next-position ?boat   ?gc                 )
                (sail               ?boat   ?boat-head ?adj-gc  )
            )     

            sail3
            (
                ;; NOT reached last waypoint, obstacle detected
                (at                 ?boat       ?gc             )
                (NOT(waypoint-last  ?gc)                        )
                (NOT(way-free       ?boat)                      )
                (adj                ?boat-head  ?adj-gc     ?gc )
            )               
            (
                (colreg-decision)
                (sail               ?boat   ?boat-head      ?adj-gc )
            )
            
        )

        ;; Method for sailling between two waypoints
        (:method (goto-next-position ?boat ?gc)

            move
            (
                (boat-head  ?boat   ?dir        )
                (adj        ?dir    ?adj-gc ?gc )
            )
            (
                (!goto      ?boat   ?gc     ?adj-gc)
            )
            

        )

        ;; Method for sailling between two waypoints
        (:method (verify-collision ?boat ?boat-head)

            head-on
            (   
                (at     ?boat       ?gc                 )   ;; Discovers boat's current grid cell
                (adj    ?boat-head  ?adj_gc ?gc         )   ;; Discovers adjascent grid explicity ahead
                (at     ?intruder   ?adj_gc             )   ;; Discovers if adjascent grid explicity ahead is occupied
                (adj    ?boat-head  ?adj_gc_2 ?adj_gc   )   ;; Discovers adjascent grid 2 steps ahead
                (at     ?intruder   ?adj_gc_2           )   ;; Discovers if adjascent grid 2 steps ahead is occupied
            )
            (
                (!operator head-on-detected)
            )

            crossing-starboard
            (   
                (at ?boat   ?gc)    ;; Discovers boat's current grid cell
                (OR                 ;; Discovers boat's adjascent grid cell
                    (   
                        (boat-head ?boat E)                
                        (adj SE ?adj_gc ?gc)    ;; Discovers adjascent grid cell                
                    )
                    (   
                        (boat-head ?boat S)                
                        (adj SW ?adj_gc ?gc)    ;; Discovers adjascent grid cell            
                    )
                    (   
                        (boat-head ?boat W)                
                        (adj NW ?adj_gc ?gc)    ;; Discovers adjascent grid cell
                    )
                    (   
                        (boat-head ?boat N)                
                        (adj NE ?adj_gc ?gc)    ;; Discovers adjascent grid cell
                    )
                
                )
                
                (at ?intruder ?adj_gc)                  ;; Discovers if adjascent grid is occupied
                (OR 
                    (   
                        ;; Test specific boat's orientation and adjascency occupancy
                        (boat-head ?boat E)                
                        (adj SE ?adj_gc_2 ?adj_gc)    ;; Discovers 2 steps adjascent grid cell                
                    )
                    (   
                        ;; Test specific boat's orientation and adjascency occupancy
                        (boat-head ?boat S)                
                        (adj SW ?adj_gc_2 ?adj_gc)    ;; Discovers 2 steps adjascent grid cell            
                    )
                    (   
                        ;; Test specific boat's orientation and adjascency occupancy
                        (boat-head ?boat W)                
                        (adj NW ?adj_gc_2 ?adj_gc)    ;; Discovers 2 steps adjascent grid cell
                    )
                    (   
                        ;; Test specific boat's orientation and adjascency occupancy
                        (boat-head ?boat N)                
                        (adj NE ?adj_gc_2 ?adj_gc)    ;; Discovers 2 steps adjascent grid cell
                    )
                
                )

                (adj ?boat-head ?adj_gc_2 ?adj_gc)      ;; Discovers adjascent grid 2 steps ahead
                (at ?intruder ?adj_gc_2)                ;; Discovers if adjascent grid 2 steps ahead is occupied
            )
            ((!operator crossing-starboard-detected))

        )

        (:operator (!head-on-detected ?boat)
            ()
            ((way-free ?boat))
            ((colregs head-on))
        )

        (:operator (!goto ?boat ?gc ?adj-gc)
            ()
            ((at ?boat ?gc))
            ((at ?boat ?adj-gc))
        )

        ;; The method for obstacle avoidance
        (:method (colregs-decision)

            head-on
            (on intruder head-on-angle)
            ((!evade-by-starboard))

            overtaking-right-crossing
            (on intruder overtaking-right-angle)
            ((!overtake-by- ?x))

            overtaking-left-crossing
            (on intruder overtaking-left-angle)
            ((!drop ?y) (!pickup ?x))

            crossing
            (on intruder crossing-angle)
            ((!drop ?y) (!pickup ?x))

        )
        
        ;; verify-collision operator
        (:operator (!verify-collision ?boat ?boat-head)
            ((at ?boat ?gc)(adj ?boat-head ?adj_gc ?gc)(NOT(at ?intruder ?adj_gc)))
            ()
            ((way-free ?boat))
        )

        

        
        
        ;; ;; verify-collision operator
        ;; (:operator (!verify-collision ?boat ?boat-head)
        ;;     ((at ?boat ?gc)(adj ?boat-head ?adj_gc ?gc)(NOT(at ?intruder ?adj_gc)))
        ;;     ()
        ;;     ((way-free ?boat))
        ;; )
        
    )
)