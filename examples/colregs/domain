;;; This file contains a SHOP domain representation of the block-stacking
;;; algorithm from the following paper:
;;;    N. Gupta and D. Nau, On the complexity of blocks-world planning,
;;;    Artificial Intelligence 56(2-3):223-254, August 1992.


;;; ------------------------------------------------------------------------
;;; Declare all the data
;;; ------------------------------------------------------------------------

(defdomain colregs
    (

        ;; The method for sailling between two waypoints
        (:method (sail ?boat ?gc ?dest)

            sail1
            ((at ?boat ?gc)(waypoint-last ?gc))                          ;; Reached last waypoint
            ()

            sail2
            ((at ?boat ?gc)(not(waypoint-last ?gc))(way-free ?boat))      ;; Not reached last waypoint, way is free (no obstacle)
            ((!verify-collision)(goto-next-position gc)(sail))            ;; Verify collision and go to next detected free position ;; maybe change to a simpler "keep going"

            sail3
            ((at boat ?gc)(not(waypoint-last ?gc))(not(way-free boat))) ;; Not reached last waypoint, obstacle detected
            ((colreg-decision)(sail))
            
        )

        ;; The method for obstacle avoidance
        (:method (colregs-decision)

            head-on
            (on intruder head-on-angle)
            ((!evade-by-starboard))

            overtaking-right-crossing
            (on intruder overtaking-right-angle)
            ((!overtake-by- ?x))

            overtaking-left-crossing
            (on intruder overtaking-left-angle)
            ((!drop ?y) (!pickup ?x))

            crossing
            (on intruder crossing-angle)
            ((!drop ?y) (!pickup ?x))

        )

        ;; Method for sailling between two waypoints
        (:method (goto-next-position ?boat ?gc)

            move
            ((boat-head ?boat ?dir)(ADJ ?dir ?adj-gc ?gc))
            ((!goto ?boat ?gc ?adj-gc))

        )

        (:operator (!goto ?boat ?gc ?adj-gc)
            ()
            (at ?boat ?gc)
            (at ?boat ?adj-gc)
        )

        
        ;; verify-collision operator
        (:operator  (!verify-collision ?boat ?boat-head)

                    (((at ?boat ?gc)(ADJ ?boat-head ?adj_gc ?gc)(occupied ?adj_gc)))
                    ()
                    (not(way-free ?boat))
    )        
    )
)
